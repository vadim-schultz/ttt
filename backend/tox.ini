[tox]
minversion = 3.18
envlist = codestyle,errors,types,test,coverage
;envlist = codestyle,docstyle,errors,types,test,coverage

isolated_build = True


[testenv]
extras = test
commands =
    test-py3{11,12,13}: pytest {posargs:tests}

[testenv:format]
description = Autoformat code.
skip_install = true
deps =
    black
    isort >= 5.0
commands =
    isort --profile black --line-length 120 {posargs:app/ tests/}
    black --line-length 120 {posargs:app/ tests/}

[testenv:format-check]
description = Check code style using black.
skip_install = true
deps =
    black
commands =
    black --check {posargs:app/ tests/}

[testenv:lint]
description = Check code for stylistic and logical errors.
deps =
    {[testenv:codestyle]deps}
;    {[testenv:docstyle]deps}
    {[testenv:types]deps}
    {[testenv:errors]deps}
commands =
    {[testenv:codestyle]commands}
;    {[testenv:docstyle]commands}
    {[testenv:types]commands}
    {[testenv:errors]commands}

[testenv:codestyle]
description = Check code and tests for PEP 8 compliance and code complexity.
skip_install = true
deps =
    flake8
    isort >= 5.0
commands =
    flake8 --select E,W,C --show-source {posargs:app/ tests/}
    isort --check --diff {posargs:app/ tests/}

;[testenv:docstyle]
;description = Check docstrings for PEP 257 compliance (Google style).
;skip_install = true
;deps =
;    pydocstyle[toml]
;commands = pydocstyle {posargs:./}

[testenv:errors]
description = Find errors with static code analysis.
deps =
    flake8
    pylint
commands =
    flake8 --select F {posargs:app/ tests/}
    pylint --errors-only {posargs:app/}

[testenv:types]
;description = Run static type checker.
;deps =
;    mypy
;commands =
;    mypy --check-untyped-defs --install-types --non-interactive {posargs:app/ tests/}

[testenv:test]
description = Run tests with pytest and coverage calculation.
passenv = CI
setenv =
   COVERAGE_FILE = .coverage.{env:OS:linux}
extras = test
commands =
    pytest --cov --cov-report= {posargs:tests}

[testenv:coverage]
description = Measure, combine and report coverage.
extras = test
deps =
    coverage[toml] >= 6.0
commands =
    coverage combine
    coverage xml
    coverage html --fail-under {posargs:50}

[testenv:clean]
description = Remove all generated and temporary files.
skip_install = true
allowlist_externals =
    git
deps =
    coverage[toml]
commands =
    coverage erase
    git clean -xfd --exclude .tox/**/clean

[flake8]
ignore = W503,E203
max-line-length = 120
